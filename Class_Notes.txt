
AZ-400 Start Date :21st Oct. 2023 

#########################
Day - 1 - 21st Oct. 2023 
##########################

		Introduction to DevOps & Azure DevOps
		
		AZ-400 
		
		DevOps ::::
		
		Fundamentals :::
		
		
		DevOps ????
		
			Dev + Ops 
			
			CI & CD ???
			
			CI CD Pipeline 
			
			
		SDLC ::: Software Development Life Cycle 
		
			- Requirement Analysis 
			- Design
			- Coding/Development
			- Testing 
			- Implemention/Deployment
			- Maintainence / Monitoring
		
		Waterfall Models ::: Linear in fashion.		--> Billing System.		9 - 12 Months
		
		Core-Project:
			- Requirement Analysis 
			- Design
			- Coding/Development
			- Testing 
			- Implemention/Deployment
			- Maintainence / Monitoring
		
		CR/Enhancement Project:
			- Requirement Analysis 
			- Design
			- Coding/Development
			- Testing 
			- Implemention/Deployment
			- Maintainence / Monitoring	



			
		Monolith Applications :
		
			- It is tightly coupled Application with lots of dependencies.
			- It can have the modules
			- Modules can be independly developed. 
			- We cannot independly test/deploy to prod.
		
		E_Commerce :::
		www.amazon.com
		
		Sign_up 			Module/Function --> Developer1 --> 
		Sign-In 
		Search 
		Add to Cart 
		Make Payment 
		Place Order 
		Trace the Order
		
		
		Agile Methodologies :::::
		
			Module1/Iteration1:			Developer1 
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring			
				
			Module2/Iteration2 :
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring				
			
				
				
			Module10/Iteration10 :
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring		 
			

				
			Module10/Iteration10 :
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring	


			Using Agile Methodologies :::
			
				We can Achieve :
						Continuos Development
						Continuos Integration
						Continuos Testing 
						Continuos Delivery
								--> It expect the a manual approval from all stake holders for production release.

			Sign_up 			Module/Function --> Developer1 --> Independently code, test, To deploy to prod we need manual intervension/approval.
			Sign-In 
			Search 
			Add to Cart 
			Make Payment 
			Place Order 
			Trace the Order							
						
				We cannot Achieve Continuos Deployment
								--> It is completely automate. This doesn't required any manual intervension/approval for production release.
			
			Sign_up 			Module/Function --> Developer1 --> Independently code, test, and deploy to prod without any manual intervension/approval.
			Sign-In 
			Search 
			Add to Cart 
			Make Payment 
			Place Order 
			Trace the Order							
						
					Monolith Application:
						- It is tightly coupled Application with lots of dependencies.
						- It can have the modules
						- Modules can be independly developed. 
						- We cannot independly test/deploy to prod.				
							
					Micro-Service Based Application:
						- It is loosely coupled application.
						- Here the modules are called as Micro-services
						- Each Micro-Service has it is own src_repo, independently code, test, and release to prod.
						
		DevOps ::::		
		
			It is a software development strategy/process, which helps to promote the collaboration between the teams like Development and Operations Team to achieve Continuos Development, Continuos Integration, Continuos Testing, Continuos Delivery, Continuos Deployment and Continuos Monitoring in fully automated fashion.
			
			
		Teams involved in SDLC ::::
		
			DevOps Team :
				Infra-Structure Management Team ==> Provisioning/Create the Infra-Structure/Configuring the Infra-Structure.
				Application Development Team			
				Testing Team 
				Release Management 
				Production Support Team 
				Production Monitoring Team
				Security Team 
				
				
		DevOps Stages :
			
				Continuos Development : 			--> IDE's (Eclipse based IDEs - Visual Studio code, Visual Studio, Pycharms)
															SRC_Code Repository - GITHUB,...  
				
					Developer :::
					
					Without DevOps :
						Code the Application  
						
						Build Code 
						Unit Test 
						Create Artifacts 
						Promote the changes to higher environment for further 
						Notify the testing to pick up the changes for testing 
						
					With DevOps Approach :::
					
							Code the Application  --> Improve the Developers' productivity
							Commit their changes to the application source_code repository.
						
						Automate the below activities using DevOps Tools:
							Build ==> Is a process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
							Unit Test  
							Promote the changes to higher environment for further 
							Notify the testing to pick up the changes for testing 							
					
				Continuos Integration :			Build Orchestration Tools 
				
						It is capability of the AD Team to contiously integrate their changes for further testing and making it ready for prod release.
				
				Continuos Testing :
						It is process of Automated testing.
				
				
				Continuos Delivery & Continuos Deployment :: Build Orchestration Tools , Docker, Kubernetes
						Both Continuos Delivery and Continuos Deployment are used to refer the production releases.
						Continuos Delivery : 
							It expect the a manual approval from all stake holders for production release.
						Continuos Deployment :
							It is completely automate. This doesn't required any manual intervension/approval for production release.
							
				Continuos Delivery: 
					Banking Application ::
					
						Online Banking / Credit Card/
							Production Release :::
									Production Release Window ::: 4Hrs - 6Hrs (Non-Business Hours) - Download.
										- Fix the Issue.
										- Revert the Changes.
										
										
				Continuos Deployment:
					Facebook 
					Netflix 
					Google 
					amazon
							
				Continuos Monitoring:	
						Monitor the Production Environments ::
							
							Infra-Structure Monitoring 
							Application Monitoring 
							
				
		
		DevOps Tools :::
		
				Open_Source DevOps Tools/Self-Managed Services :
				
					Jenkins, gitlab-ci
					github
					gitlab 
					bitbucket
					Docker 
					Docker Swarm 
					Kubernetes 
					Prometheus/Grafana
					
				
				
				Managed Services :
					From the service Providers ::
					
		
					AZ 		--> Az board, Repos, Artifacts, Test, Pipelines (Azure DevOps Services)
					AWS 	--> AWS Code Commit,Repo,build,code-deploy
			
				Azure DevOps Services ::::
				
					--> Gain Access to Azure Cloud portal. https://portal.azure.com/
							- Create an free Account to access Azure Portal.
							- 	Active/Valid Credit Card 
							-   Active/Valid Email ID and Phone Number.
				
					
				
				Create github Account https://github.com/
			
			
			
			
#########################
Day - 2 - 22nd Oct. 2023 
#########################	


			DevOps LifeCycle ::
			
				Plan 			==>		AZ Boards
				Develop 		==> 	Create Source Code, SRC_Code Repository, Build, Unit Testing ==> Promoted to Test Environments
				Delivery		==> 	Production Release  
				Operate			==> 	Monitoring
			
			1. Introduce a New Product to Customer ::: Banking 
			
				Product Owner --> 
				Design & Architect the product 
				
			End-to-End Project Activities :::
			
				Start Date :
				
					ALM Tool => Application LifeCycle Management Tool
								Jira
					
					
				Azure Subscription -- Free 
				
					Team / Organization ==> Azure Organization 
												Project1
													Az board, Repos, Artifacts, Test, Pipelines (Azure DevOps Services)
												Project2
												
												
				DevOps Team :::
				
				Project Level :
				
				
				
				Version Control System :::
						- Is used to manage the source code 
						- Its is used to version control the changes 
						- Tracking the changes.
				
				1. index.html 
				
					---
					---
					-
					--
					
					-
					--asdasfasdfsdf-
					-
					-
					-
					-
					-
				
				VCS :
						index.html_V1.0				--> myapp.war_v1.0
						index.html_V1.2				--> myapp.war_v1.2 
						index.html_V1.3
						index.html_V1.4
						index.html_V1.5
				
				Centralized VCS 
				
				Distributed VCS - github/az-repos
				
				Build ==> Is a process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
							
				
				
				Artifactory Library ::	
					Jfrog Artifactory:	
					AZ Architects
					
					Tomcat 	--> official page --> list of release 
					jdk
					
				Project Management --> 
				
					- Action Items 
						
					  Requirement From Customer
				Migrate my application from Jenkins to Azure Pipeline. ????
				
				Migrate my application from GITHUB to Azure Repos. ????
				
				Assessment Phase:
					- Detailed Analysis of Exiting Github Environment 
					- Identify & Capture all the Dependencies
					- Identify the list of Team/Users
					- Identify the Access level of the Team
					- Identify the Sample Repos from GITHub to Azure Repos
					
					==> Produce the Assessment report.
					
				Migration Phase - based on Assessment Report:
					
					
				Git Repository Management :::
				
				Git Branching Strategies ::::	- is used to avoid conflicts in master branch or to maintain the integrity of master branch
				
				Version Control System :::
						- Is used to manage the source code 
						- Its is used to version control the changes 
						- Tracking the changes.	
						- Parallel Development.
					
				Branches are used to perform Parallel Development :::
				 Branches are use to isolate the work
				
					- Repository --
						master/main ==> Default Branch - Considered as prod version
						Sharing of codes to other users us done though master/maian Branch
						but if you want to make changes, you should never do it on main branch but on feature branch

					Feature Branch 
							
1 :						
				Repo :
					master 			cm1,2,3,4
						
						feature1	cm1,2,3,4,f1cm1,f1cm2
						feature2	cm1,2,3,4
						feature3	cm1,2,3,4
						
                     To help reduce conflict when merging feature branch to Master branch, it is best
					 to go with the explaination below. Meaning create a branch by replicating the master branch
					 in our case will called it Dev_Branch. So whenever you are done with your feature branch
					 you can commit it to the Dev_Branch.
2 :				
				Repo :
					master 			cm1,2,3,4
						Dev_Branch 	cm1,2,3,4
							feature1	cm1,2,3,4,f1cm1,f1cm2
							feature2	cm1,2,3,4
							feature3	cm1,2,3,4
							
3 :				
				Repo :
					master 			cm1,2,3,4
					
						Integration_Branch :						Team1
							Dev1_Branch 	cm1,2,3,4
								feature1	cm1,2,3,4,f1cm1,f1cm2
								feature2	cm1,2,3,4
								feature3	cm1,2,3,4				
							Dev2_Branch 	cm1,2,3,4
								feature1	cm1,2,3,4,f1cm1,f1cm2
								feature2	cm1,2,3,4
								feature3	cm1,2,3,4

4 :				
				Repo :
					master 			cm1,2,3,4,Team1,Team2
					
						Release_Branch -- > cm1,2,3,4,Team1,Team2
							Integration_Branch1 :						Team1
								Dev1_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4				
								Dev2_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4
							Integration_Branch2 :						Team2
								Dev1_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4				
								Dev2_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4
									
									
#########################
Day - 3 - 28th Oct. 2023 
#########################		

				Azure DevOps Service :::
				
					Az Boards 
					Az Repo 
					Az Pipelines 
					Az Tests
					Az Artifacts 
					
					
				CI/CD :::
					SCM : source_code Manager
					SCM_Repo ==> Build ==> Create Artifacts(*.war) ==> Deploy to Target Envrionments(QA/UAT/PROD)
					
					SCM_Repo ==> Build ==> Create Artifacts ==> Create Appln. Image ==> Published to Container Registry ==> Deploy to Kubernetes


				Azure DevOps Service ::: 
				
					ALM --> Jira 
					Az Boards ==> Agile Planning and Portfolio Management 
					
					Project Manager Perspective :::
					
					Create a New Product: 
					Scrum Master :::::
					
					Launch a Website :::
					
						Online Training: ==> Web application.
						Epic : My webapp deployment  
						Epic means the collection of more one then tasks.
							Enquires 					==>
								-> Front_End Design
								-> application logic
								-> Dbase
							User Registration
							Content management 
							
					Az Boards ==> Agile Planning and Portfolio Management 
					
					Team Management 
					Work Items 
					Duration of Work item  - Sprints ==> 2 weeks Sprint 10 Working Days
					
					Define the Sprint ==> 2 wks 3 wks
						Types of Activities :::
							Enquires 
								-> Front_End Design		Epic,Feature,test,release,bug
										Create Panel 
										Test Panels
											Create Test_Cases 
											Create Test_Data
								-> application logic
								-> Dbase
								
					Customization of Dashboard/ boards.
						
					
					
					DL - Distribution List.
					
					
					Backlog Item :::
					
					
					parent workitem 
						c1
							sub task1
								subtask2 
						c2
						c3
					
					
					Parenttask 	--> Create Front_end Design 
					childtask	--> Test the Front_end Design
					
					
					Training Review ::: Feature 
					
						1st level 
						2nd level 
						3rd level 
						
						
					Install Visual Studio Code. https://code.visualstudio.com/download
					
#########################
Day - 4 - 29th Oct. 2023 
#########################

				Eclipse based IDEs ==> VS Code, 
				
				Working with VSCode to access Az Repos.
				
				Continuos Development :::
				
				
					Developers' Workload :::
					
						Enhancement Project 
						Bugfix 
						
						New Project
						
						https://LoksaiTrainingOrg@dev.azure.com/LoksaiTrainingOrg/OnlineProjectApp1/_git/OnlineProjectApp1
						
						
						Workspace ???
						
			GIT File Workflow :::
			
			
			LOCAL Machine:																			REMOTE Server:
			
				Working_directory 		==> Staging Area		==>		Local Repo.			==> 		Remote Repository
				
				s1.txt 			git add 	s1.txt 			git commit 	 s1.txt 		git push			s1.txt 	
				
				
			Pull and Push ???
			
			in the remote environment create pull request 
			
			Rebase ::: 
				Keep the current branch in sync with target and maintain the linear commit history.
				
				
				
			feature1_Branch ::
			
				cm1,2,3,4,5,6
				
			merge to target branch ::

				git merge feature1_Branch 
				
				git cherry-pick Team1
				
				git squash -- Is used to combine the commits while merge to target branch.
				
4 :				
				Repo :
					master 			cm1,2,3,4,Team1
					
						Release_Branch -- > cm1,2,3,4,Team1,Team2
						
							Integration_Branch1 : cm1,2,3,4,Dev1_Changes,Dev2_Changes				Team1
								Dev1_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4				
								Dev2_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4
							Integration_Branch2 : cm1,2,3,4,Dev1_Changes,Dev2_Changes				Team2
								Dev1_Branch 	cm1,2,3,4,f1cm1,f1cm2,f2cm1,f2cm2,f3cm1,f3cm2
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4,f2cm1,f2cm2
									feature3	cm1,2,3,4,f3cm1,f3cm2				
								Dev2_Branch 	cm1,2,3,4,f1cm1,f1cm2,f2cm1,f2cm2,f3cm1,f3cm2
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4,f2cm1,f2cm2
									feature3	cm1,2,3,4,f3cm1,f3cm2
									
									
				sonarqube - Analysis :::
				 You will find SonarQube in Repos known as Advance Security
				Befor you process a data, make sure to do complete code Review
				
				Sonarqube help to check for
					- Check code quality/coding standard/vul..
					
					- Quality Gate metrics
					
				Scanning of image can be done at the 

				code Level 
				    &
				Container image level 
				
				
				Security :::
			We have static code analizer 
			    &
			Dynamic code analizer	
			It is require to integrate this two set analizers as part of your SSG process
		
		Azure Pipeline ::
		
				- Build Orchestration Tool .  It simply means that your Azure pipeline will is not going to build anything,
				                              It will just going to integrate the build and deployment tools and automate the process.
				
				Apart from Azure pipeline, we have things like
				jenkins 
				aws codepipeline 
				bamboo
				
				
		CICD Pipeline :::						Build Server ! - Agents 
		     SCM Means Source Code
			SCM_Checkout 
			Build 
			Create artifacts 
			Create Docker Images 
			Publish to container Registry 
			Deploy to Kubernetes Cluster 
			
		Jenkins_Master 
		  Repical of Agents
			Jenkins_Slave_Node(VM)		==> Build Server  - java Appln. Build (jdk,maven,git)
			Jenkins_Slave_Node(VM)		==> Build Server 
			Jenkins_Slave_Node(VM)		==> Build Server 
			Jenkins_Slave_Node(VM)		==> Build Server 
			
			
			
		Az Agent Pool ::
				Agent1  (VM)			== java Appln. Build (jdk,maven,git)
				Agent1.2 		== java Appln. Build (jdk,maven,git)
				Agent1.3 		== java Appln. Build (jdk,maven,git)
				Agent2		==> C# (.Net Core) 
				Agent3		==> Python 
				Agent4
				Agent5
				
Next :;

	setup managed/self-hosted agents
	cicd pipeline - build


	
#########################
Day - 5 - 4th Nov. 2023 
#########################

		Working with Azure Pipelines :::
		
		CICD Pipeline :::						Build Server ! - Agents 
		
			SCM_Checkout 
			Build 					--> Compile the src code 
			Create artifacts 		--> Binaries/Execuatables - *.war/*.jar/*.exec
			Create Docker Images 
			Publish to container Registry 
			Deploy to Kubernetes Cluster 
			
			
		setup managed/self-hosted agents	
		
		Az Agent Pool ::
				Agent1  (VM)			== java Appln. Build (jdk,maven,git) --> Azure_VM,GCP_VM,AWS_EC2_Instance/On-Premise
				Agent1.2 		== java Appln. Build (jdk,maven,git)
				Agent1.3 		== java Appln. Build (jdk,maven,git)
				Agent2		==> C# (.Net Core) 
				Agent3		==> Python 
				Agent4
				Agent5
				
		script based --> 
		
		Managed service -
		
		Self Managed Node - VM - Install required build tools.
		
		
		Docker Container ???
		
		
		Micro-Service :::
		
		
		CI =
		
		CD = Container / - Create Container Images - Build / commit.
		
		Pre-requisites ::::
		
		
		CI --> SCM_Checkout,Build,Unit Test,Create Artifacts -> Java Web Application --> Maven/Gradle/Ant -> *.war/*.jar 
		
		CD --> 
		
		Deployment  ==> It is aprocess of copying the artifacts from source Machine(Build Server-VM) to target servers(QA/UAT/PROD-VMs)
		

		Non-Prod Environment 															Prod Environment
          The Developer as develop the code using something like IDE or VSCode
		Dev				IDE, VSCode --> 

		The next step is me devops engineer. I start buildoing

		Build 			*.war --> BUILD TOOLS - Maven/Gradle/Ant/GIT/JDK / 			mywebapp.war -- unit test
		               
					   For Docker base application you will be installing .Net code, .Net Framework and all the .Net tools will be install their.
					   If it a python base application you will be installing python tools.
					   Or if it a note J or Anglela 
					   Depends on what type of Application the conresponding base appplication has to be install.
							
							Web Application Server --> Software - Tomcat/Nginx/Apache --> tomcat_v8.0,OpenJdk11 
							  (tomcat_v8.0,OpenJdk11 This tools are examples of tools use in testing application)

				The above application are consinder as a web server which to run you applications		
		        So your artifact is tested using the following Web Application Server --> Software - Tomcat/Nginx/Apache

             
			Note: It is the Artifact that you are taking to Terget Environment for further Testing.
		
		
		Target Environments
			Test 
			In the testing environment, the below tools are needed. Whatever you use in testing in the non-production environment that is what you should in the production environment.
			Note: Whatever you tools you use in running your application in the Non-Prod Environment that is what you shoud be bringing to the Target environment

				QA 			==> Testing tools, Web Application Server - tomcat_v8.0,OpenJdk11
				UAT 			tomcat_v8.0,OpenJdk11
				Pre-Prod							===>										Production Environment - tomcat_v8.0,OpenJdk11
		
		
		
		
		Containerization :::
					It is a process of packaging the Application artifacts along with its dependencies.
			
		
			Non-Prod Environment 															Prod Environment

			Dev				IDE, VSCode --> Src_code ==> 
			
			Build 			*.war --> BUILD TOOLS - Maven/Gradle/Ant/GIT/JDK / 			mywebapp.war -- unit test
								Web Application Server --> Software - Tomcat/Nginx/Apache --> tomcat_v8.0,OpenJdk11
								
					Package --> (mywebapp.war,tomcat_v8.0,OpenJdk11) --> mywebapp_pkg:v1.0 - Package_ID ==> Image.
					
					Containerization ::
						Terminologies ::

						Image 			--> Static file that composed of many layers of application Architects and its dependencies.
											Non-Executable.
						Container 		--> Containers are the executable units of Container Images
											Not a permanent entity. Meaning at any point of time container can go to no executing stage or get crash.
						Container Registry --> Are used to store and manage/version control the Container Images. 
												dockerhub - Container Registry.
												hub.docker.com 
												
			If you want to set up a tomcat server you follow the below steps.									
			QA - Server --> Tomcat Web server :::
			
				jdk 
				Create Envi. variable for JDK 
				Install Tomcat 
				start tomcat 
			
			
			Target Environments
				Test 
					QA 			==> Testing tools, Web Application Server - tomcat_v8.0,OpenJdk11
					UAT 			tomcat_v8.0,OpenJdk11
					Pre-Prod							===>										Production Environment - tomcat_v8.0,OpenJdk11
			
				
		
			Image in Docker hub. 
			
				docker pull 
				
				docker run 
				
				docker exec 
				
				docker build & docker commit :
						Used to create Docker Images.
						
						Docker build 	--> uses Dockerfile to create image.
						
						Docker commit 	--> Container_Id to create New Image out of it.
				
				docker compose :
						Is used run multiple containers as a single service.
						Manifest file --> *.yaml  : This file helps in defining the containers and the service.
						
				Deploy a service :::
				     This is a three tier application Front_End, Application_Logic, Backend(Database).
					sign_up - micro-service ==> 			Deployed in a prod server1,2,3,4,5
						Front_End					c1,c1,c2 
						Application_Logic 			c2,c2,c2 
						Backend(Database)			c3,c3,c3
				
				
				docker swarm :
						Is a container Orchestration Tool 
						Ensure high availablity of containers 
						
					Replicas --> 3 copies of container.
					
						Docker_Swarm_Master 
								Worker_Node1
								Worker_Node2
								Worker_Node3
								
				Kubernetes :
						Open Source - Is a container Orchestration Tool 
						Ensure high availablity of containers 
					
					Kubernetes_Master
						Kubernetes_WorkerNode1
						Kubernetes_WorkerNode2
						Kubernetes_WorkerNode3

				Managed Kubernetes Services :
					AKS  
					EKS 
					GKS 
									
								
			Azure Pipelines ::::			

				Build Pipeline : CI 
				
				Release Pipeline : CD 
							
			These pipelines are executed/launched in Self-Hosted Agents(Build Servers)/Azure Managed Agents(Build Servers)
			
			- Static Agent - Self-Hosted Agents(You have to Build Tools yourself) This is run by you. You create the VM's
			
			- Dynamic Agent - Agents are dynamic created as soon as you create the build and the agent will be stall with all the require tools and it will pick up your source code for build and artifact. 
			
		
			
			
			Containerization :::
			
				Infra-Structure  ::::
				
					Agents --> Build the Application:
					
						Az Agent Pool ::		         VM Level :::
								Agent1  (VM)			== java Appln. Build (jdk,maven,git)
								Agent1.2 				== java Appln. Build (jdk,maven,git)
								Agent1.3 				== java Appln. Build (jdk,maven,git)
								Agent2					==> C# (.Net Core) 
								Agent3					==> Python 
								Agent4					==> NodeJS 
								Agent5					==> Angular 
				
					Containerization ::: Using Containers, we can reduce the no. of VMs.
					
						Az Agen Pool ::
								Agent1 (VM) 
									Container_Engine 
										C1				== java Appln. Build (jdk,maven,git)
										C2              == java Appln. Build (jdk,maven,git)
										C3              == java Appln. Build (jdk,maven,git)
										C4              ==> C# (.Net Core) 
										C5              ==> Python 
										C6              ==> NodeJS 
										C7              ==> Angular 
					
					
				Main Advantage of using Containers over Virtual Machines :::

                                 Virtual Machines
						VMs are used to run the OS 
						It is at the Hardware level virtualization 
						It consumes lot of resources and time to run the application
					
					                 Containers
						Containers are used to run the Application. NOT Operating System 
						It is at the OS level virtualization 
						It consumes less resources and time to run the application.
						Once the task is completed containers will go to exit state, which will release all the associated resources.
						
						Container Orchestration Tools - (Kubernetes) This is use to manage the containers.
						
				Development/Deployment :::::
			
					It is a process of packaging the Application artifacts along with its dependencies.
			
		
						Non-Prod Environment 															Prod Environment

						Dev				IDE, VSCode --> Src_code ==> 
						
						Build 			*.war --> BUILD TOOLS - Maven/Gradle/Ant/GIT/JDK / 			mywebapp.war -- unit test
											Web Application Server --> Software - Tomcat/Nginx/Apache --> tomcat_v8.0,OpenJdk11
											
								Package --> (mywebapp.war,tomcat_v8.0,OpenJdk11) --> mywebapp_pkg:v1.0 - Package_ID ==> Image.
								Containerization ::
									
								Terminologies ::
									Image 			--> Static file that composed of many layers of application Architects and its dependencies.
														Non-Executable.
									Container 		--> Containers are the executable units of Container Images
														Not a permanent entity. 
									Container Registry --> Are used to store and manage/version control the Container Images. 
															dockerhub - Container Registry.
															hub.docker.com 				
							
            Pom.xml file is use to defind your artifact. 
			what is the name of your artifact that you create
			what type of packaging, is it war file and what are the dependencies we need to build this application and what are the plugin's we need to build this application



         Note: It is the responsibility of the developer to maintain Dockerfile in the source code repository

         Note: Package is not a container. It is just a war file.

		 In Azure in order to perform pipeline, you need a pipeline script.

			Create a New Org. 
			Import a src_code repo.
			Create a build Pipeline 
				With Azure Managed Agents
				With Self Managed Agents
				
				
			https://aka.ms/azpipelines-parallelism-request

			https://dev.azure.com/OsasPipelinedemo-org1/   (Organization name)
			
Devops team are just a like a facilitators
Our job as a Devops team is to help developers to onboard the application.
Once it is onboarded then after it will be self help activities. whatever they want they have everything in their repository.
 They can start using it.