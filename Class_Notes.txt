
AZ-400 Start Date :21st Oct. 2023 

#########################
Day - 1 - 21st Oct. 2023 
##########################

		Introduction to DevOps & Azure DevOps
		
		AZ-400 
		
		DevOps ::::
		
		Fundamentals :::
		
		
		DevOps ????
		
			Dev + Ops 
			
			CI & CD ???
			
			CI CD Pipeline 
			
			
		SDLC ::: Software Development Life Cycle 
		
			- Requirement Analysis 
			- Design
			- Coding/Development
			- Testing 
			- Implemention/Deployment
			- Maintainence / Monitoring
		
		Waterfall Models ::: Linear in fashion.		--> Billing System.		9 - 12 Months
		
		Core-Project:
			- Requirement Analysis 
			- Design
			- Coding/Development
			- Testing 
			- Implemention/Deployment
			- Maintainence / Monitoring
		
		CR/Enhancement Project:
			- Requirement Analysis 
			- Design
			- Coding/Development
			- Testing 
			- Implemention/Deployment
			- Maintainence / Monitoring	



			
		Monolith Applications :
		
			- It is tightly coupled Application with lots of dependencies.
			- It can have the modules
			- Modules can be independly developed. 
			- We cannot independly test/deploy to prod.
		
		E_Commerce :::
		www.amazon.com
		
		Sign_up 			Module/Function --> Developer1 --> 
		Sign-In 
		Search 
		Add to Cart 
		Make Payment 
		Place Order 
		Trace the Order
		
		
		Agile Methodologies :::::
		
			Module1/Iteration1:			Developer1 
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring			
				
			Module2/Iteration2 :
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring				
			
				
				
			Module10/Iteration10 :
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring		 
			

				
			Module10/Iteration10 :
				- Requirement Analysis 
				- Design
				- Coding/Development
				- Testing 
				- Implemention/Deliver
				- Maintainence / Monitoring	


			Using Agile Methodologies :::
			
				We can Achieve :
						Continuos Development
						Continuos Integration
						Continuos Testing 
						Continuos Delivery
								--> It expect the a manual approval from all stake holders for production release.

			Sign_up 			Module/Function --> Developer1 --> Independently code, test, To deploy to prod we need manual intervension/approval.
			Sign-In 
			Search 
			Add to Cart 
			Make Payment 
			Place Order 
			Trace the Order							
						
				We cannot Achieve Continuos Deployment
								--> It is completely automate. This doesn't required any manual intervension/approval for production release.
			
			Sign_up 			Module/Function --> Developer1 --> Independently code, test, and deploy to prod without any manual intervension/approval.
			Sign-In 
			Search 
			Add to Cart 
			Make Payment 
			Place Order 
			Trace the Order							
						
					Monolith Application:
						- It is tightly coupled Application with lots of dependencies.
						- It can have the modules
						- Modules can be independly developed. 
						- We cannot independly test/deploy to prod.				
							
					Micro-Service Based Application:
						- It is loosely coupled application.
						- Here the modules are called as Micro-services
						- Each Micro-Service has it is own src_repo, independently code, test, and release to prod.
						
		DevOps ::::		
		
			It is a software development strategy/process, which helps to promote the collaboration between the teams like Development and Operations Team to achieve Continuos Development, Continuos Integration, Continuos Testing, Continuos Delivery, Continuos Deployment and Continuos Monitoring in fully automated fashion.
			
			
		Teams involved in SDLC ::::
		
			DevOps Team :
				Infra-Structure Management Team ==> Provisioning/Create the Infra-Structure/Configuring the Infra-Structure.
				Application Development Team			
				Testing Team 
				Release Management 
				Production Support Team 
				Production Monitoring Team
				Security Team 
				
				
		DevOps Stages :
			
				Continuos Development : 			--> IDE's (Eclipse based IDEs - Visual Studio code, Visual Studio, Pycharms)
															SRC_Code Repository - GITHUB,...  
				
					Developer :::
					
					Without DevOps :
						Code the Application  
						
						Build Code 
						Unit Test 
						Create Artifacts 
						Promote the changes to higher environment for further 
						Notify the testing to pick up the changes for testing 
						
					With DevOps Approach :::
					
							Code the Application  --> Improve the Developers' productivity
							Commit their changes to the application source_code repository.
						
						Automate the below activities using DevOps Tools:
							Build ==> Is a process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
							Unit Test  
							Promote the changes to higher environment for further 
							Notify the testing to pick up the changes for testing 							
					
				Continuos Integration :			Build Orchestration Tools 
				
						It is capability of the AD Team to contiously integrate their changes for further testing and making it ready for prod release.
				
				Continuos Testing :
						It is process of Automated testing.
				
				
				Continuos Delivery & Continuos Deployment :: Build Orchestration Tools , Docker, Kubernetes
						Both Continuos Delivery and Continuos Deployment are used to refer the production releases.
						Continuos Delivery : 
							It expect the a manual approval from all stake holders for production release.
						Continuos Deployment :
							It is completely automate. This doesn't required any manual intervension/approval for production release.
							
				Continuos Delivery: 
					Banking Application ::
					
						Online Banking / Credit Card/
							Production Release :::
									Production Release Window ::: 4Hrs - 6Hrs (Non-Business Hours) - Download.
										- Fix the Issue.
										- Revert the Changes.
										
										
				Continuos Deployment:
					Facebook 
					Netflix 
					Google 
					amazon
							
				Continuos Monitoring:	
						Monitor the Production Environments ::
							
							Infra-Structure Monitoring 
							Application Monitoring 
							
				
		
		DevOps Tools :::
		
				Open_Source DevOps Tools/Self-Managed Services :
				
					Jenkins, gitlab-ci
					github
					gitlab 
					bitbucket
					Docker 
					Docker Swarm 
					Kubernetes 
					Prometheus/Grafana
					
				
				
				Managed Services :
					From the service Providers ::
					
		
					AZ 		--> Az board, Repos, Artifacts, Test, Pipelines (Azure DevOps Services)
					AWS 	--> AWS Code Commit,Repo,build,code-deploy
			
				Azure DevOps Services ::::
				
					--> Gain Access to Azure Cloud portal. https://portal.azure.com/
							- Create an free Account to access Azure Portal.
							- 	Active/Valid Credit Card 
							-   Active/Valid Email ID and Phone Number.
				
					
				
				Create github Account https://github.com/
			
			
			
			
#########################
Day - 2 - 22nd Oct. 2023 
#########################	


			DevOps LifeCycle ::
			
				Plan 			==>		AZ Boards
				Develop 		==> 	Create Source Code, SRC_Code Repository, Build, Unit Testing ==> Promoted to Test Environments
				Delivery		==> 	Production Release  
				Operate			==> 	Monitoring
			
			1. Introduce a New Product to Customer ::: Banking 
			
				Product Owner --> 
				Design & Architect the product 
				
			End-to-End Project Activities :::
			
				Start Date :
				
					ALM Tool => Application LifeCycle Management Tool
								Jira
					
					
				Azure Subscription -- Free 
				
					Team / Organization ==> Azure Organization 
												Project1
													Az board, Repos, Artifacts, Test, Pipelines (Azure DevOps Services)
												Project2
												
												
				DevOps Team :::
				
				Project Level :
				
				
				
				Version Control System :::
						- Is used to manage the source code 
						- Its is used to version control the changes 
						- Tracking the changes.
				
				1. index.html 
				
					---
					---
					-
					--
					
					-
					--asdasfasdfsdf-
					-
					-
					-
					-
					-
				
				VCS :
						index.html_V1.0				--> myapp.war_v1.0
						index.html_V1.2				--> myapp.war_v1.2 
						index.html_V1.3
						index.html_V1.4
						index.html_V1.5
				
				Centralized VCS 
				
				Distributed VCS - github/az-repos
				
				Build ==> Is a process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
							
				
				
				Artifactory Library ::	
					Jfrog Artifactory:	
					AZ Architects
					
					Tomcat 	--> official page --> list of release 
					jdk
					
				Project Management --> 
				
					- Action Items 
						
					  Requirement From Customer
				Migrate my application from Jenkins to Azure Pipeline. ????
				
				Migrate my application from GITHUB to Azure Repos. ????
				
				Assessment Phase:
					- Detailed Analysis of Exiting Github Environment 
					- Identify & Capture all the Dependencies
					- Identify the list of Team/Users
					- Identify the Access level of the Team
					- Identify the Sample Repos from GITHub to Azure Repos
					
					==> Produce the Assessment report.
					
				Migration Phase - based on Assessment Report:
					
					
				Git Repository Management :::
				
				Git Branching Strategies ::::	- is used to avoid conflicts in master branch or to maintain the integrity of master branch
				
				Version Control System :::
						- Is used to manage the source code 
						- Its is used to version control the changes 
						- Tracking the changes.	
						- Parallel Development.
					
				Branches are used to perform Parallel Development :::
				 Branches are use to isolate the work
				
					- Repository --
						master/main ==> Default Branch - Considered as prod version
						Sharing of codes to other users us done though master/maian Branch
						but if you want to make changes, you should never do it on main branch but on feature branch

					Feature Branch 
							
1 :						
				Repo :
					master 			cm1,2,3,4
						
						feature1	cm1,2,3,4,f1cm1,f1cm2
						feature2	cm1,2,3,4
						feature3	cm1,2,3,4
						
                     To help reduce conflict when merging feature branch to Master branch, it is best
					 to go with the explaination below. Meaning create a branch by replicating the master branch
					 in our case will called it Dev_Branch. So whenever you are done with your feature branch
					 you can commit it to the Dev_Branch.
2 :				
				Repo :
					master 			cm1,2,3,4
						Dev_Branch 	cm1,2,3,4
							feature1	cm1,2,3,4,f1cm1,f1cm2
							feature2	cm1,2,3,4
							feature3	cm1,2,3,4
							
3 :				
				Repo :
					master 			cm1,2,3,4
					
						Integration_Branch :						Team1
							Dev1_Branch 	cm1,2,3,4
								feature1	cm1,2,3,4,f1cm1,f1cm2
								feature2	cm1,2,3,4
								feature3	cm1,2,3,4				
							Dev2_Branch 	cm1,2,3,4
								feature1	cm1,2,3,4,f1cm1,f1cm2
								feature2	cm1,2,3,4
								feature3	cm1,2,3,4

4 :				
				Repo :
					master 			cm1,2,3,4,Team1,Team2
					
						Release_Branch -- > cm1,2,3,4,Team1,Team2
							Integration_Branch1 :						Team1
								Dev1_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4				
								Dev2_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4
							Integration_Branch2 :						Team2
								Dev1_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4				
								Dev2_Branch 	cm1,2,3,4
									feature1	cm1,2,3,4,f1cm1,f1cm2
									feature2	cm1,2,3,4
									feature3	cm1,2,3,4
									
									
#########################
Day - 3 - 28th Oct. 2023 
#########################		

				Azure DevOps Service :::
				
					Az Boards 
					Az Repo 
					Az Pipelines 
					Az Tests
					Az Artifacts 
					
					
				CI/CD :::
					SCM : source_code Manager
					SCM_Repo ==> Build ==> Create Artifacts(*.war) ==> Deploy to Target Envrionments(QA/UAT/PROD)
					
					SCM_Repo ==> Build ==> Create Artifacts ==> Create Appln. Image ==> Published to Container Registry ==> Deploy to Kubernetes


				Azure DevOps Service ::: 
				
					ALM --> Jira 
					Az Boards ==> Agile Planning and Portfolio Management 
					
					Project Manager Perspective :::
					
					Create a New Product: 
					Scrum Master :::::
					
					Launch a Website :::
					
						Online Training: ==> Web application.
						Epic : My webapp deployment  
						Epic means the collection of more one then tasks.
							Enquires 					==>
								-> Front_End Design
								-> application logic
								-> Dbase
							User Registration
							Content management 
							
					Az Boards ==> Agile Planning and Portfolio Management 
					
					Team Management 
					Work Items 
					Duration of Work item  - Sprints ==> 2 weeks Sprint 10 Working Days
					
					Define the Sprint ==> 2 wks 3 wks
						Types of Activities :::
							Enquires 
								-> Front_End Design		Epic,Feature,test,release,bug
										Create Panel 
										Test Panels
											Create Test_Cases 
											Create Test_Data
								-> application logic
								-> Dbase
								
					Customization of Dashboard/ boards.
						
					
					
					DL - Distribution List.
					
					
					Backlog Item :::
					
					
					parent workitem 
						c1
							sub task1
								subtask2 
						c2
						c3
					
					
					Parenttask 	--> Create Front_end Design 
					childtask	--> Test the Front_end Design
					
					
					Training Review ::: Feature 
					
						1st level 
						2nd level 
						3rd level 
						
						
					Install Visual Studio Code. https://code.visualstudio.com/download
